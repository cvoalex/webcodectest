// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: proto/compositing.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CompositingService_InferBatchComposite_FullMethodName = "/compositing.CompositingService/InferBatchComposite"
	CompositingService_ListModels_FullMethodName          = "/compositing.CompositingService/ListModels"
	CompositingService_LoadModel_FullMethodName           = "/compositing.CompositingService/LoadModel"
	CompositingService_UnloadModel_FullMethodName         = "/compositing.CompositingService/UnloadModel"
	CompositingService_GetModelStats_FullMethodName       = "/compositing.CompositingService/GetModelStats"
	CompositingService_Health_FullMethodName              = "/compositing.CompositingService/Health"
)

// CompositingServiceClient is the client API for CompositingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// CompositingService provides compositing + encoding (calls inference server internally)
type CompositingServiceClient interface {
	// InferBatchComposite performs inference + compositing + encoding
	InferBatchComposite(ctx context.Context, in *CompositeBatchRequest, opts ...grpc.CallOption) (*CompositeBatchResponse, error)
	// ListModels returns available models (from both inference server and local config)
	ListModels(ctx context.Context, in *ListModelsRequest, opts ...grpc.CallOption) (*ListModelsResponse, error)
	// LoadModel explicitly loads a model (loads on both servers)
	LoadModel(ctx context.Context, in *LoadModelRequest, opts ...grpc.CallOption) (*LoadModelResponse, error)
	// UnloadModel explicitly unloads a model
	UnloadModel(ctx context.Context, in *UnloadModelRequest, opts ...grpc.CallOption) (*UnloadModelResponse, error)
	// GetModelStats returns usage statistics
	GetModelStats(ctx context.Context, in *GetModelStatsRequest, opts ...grpc.CallOption) (*GetModelStatsResponse, error)
	// Health returns server health status
	Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error)
}

type compositingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCompositingServiceClient(cc grpc.ClientConnInterface) CompositingServiceClient {
	return &compositingServiceClient{cc}
}

func (c *compositingServiceClient) InferBatchComposite(ctx context.Context, in *CompositeBatchRequest, opts ...grpc.CallOption) (*CompositeBatchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CompositeBatchResponse)
	err := c.cc.Invoke(ctx, CompositingService_InferBatchComposite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *compositingServiceClient) ListModels(ctx context.Context, in *ListModelsRequest, opts ...grpc.CallOption) (*ListModelsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListModelsResponse)
	err := c.cc.Invoke(ctx, CompositingService_ListModels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *compositingServiceClient) LoadModel(ctx context.Context, in *LoadModelRequest, opts ...grpc.CallOption) (*LoadModelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoadModelResponse)
	err := c.cc.Invoke(ctx, CompositingService_LoadModel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *compositingServiceClient) UnloadModel(ctx context.Context, in *UnloadModelRequest, opts ...grpc.CallOption) (*UnloadModelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnloadModelResponse)
	err := c.cc.Invoke(ctx, CompositingService_UnloadModel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *compositingServiceClient) GetModelStats(ctx context.Context, in *GetModelStatsRequest, opts ...grpc.CallOption) (*GetModelStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetModelStatsResponse)
	err := c.cc.Invoke(ctx, CompositingService_GetModelStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *compositingServiceClient) Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, CompositingService_Health_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CompositingServiceServer is the server API for CompositingService service.
// All implementations must embed UnimplementedCompositingServiceServer
// for forward compatibility.
//
// CompositingService provides compositing + encoding (calls inference server internally)
type CompositingServiceServer interface {
	// InferBatchComposite performs inference + compositing + encoding
	InferBatchComposite(context.Context, *CompositeBatchRequest) (*CompositeBatchResponse, error)
	// ListModels returns available models (from both inference server and local config)
	ListModels(context.Context, *ListModelsRequest) (*ListModelsResponse, error)
	// LoadModel explicitly loads a model (loads on both servers)
	LoadModel(context.Context, *LoadModelRequest) (*LoadModelResponse, error)
	// UnloadModel explicitly unloads a model
	UnloadModel(context.Context, *UnloadModelRequest) (*UnloadModelResponse, error)
	// GetModelStats returns usage statistics
	GetModelStats(context.Context, *GetModelStatsRequest) (*GetModelStatsResponse, error)
	// Health returns server health status
	Health(context.Context, *HealthRequest) (*HealthResponse, error)
	mustEmbedUnimplementedCompositingServiceServer()
}

// UnimplementedCompositingServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCompositingServiceServer struct{}

func (UnimplementedCompositingServiceServer) InferBatchComposite(context.Context, *CompositeBatchRequest) (*CompositeBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InferBatchComposite not implemented")
}
func (UnimplementedCompositingServiceServer) ListModels(context.Context, *ListModelsRequest) (*ListModelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListModels not implemented")
}
func (UnimplementedCompositingServiceServer) LoadModel(context.Context, *LoadModelRequest) (*LoadModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadModel not implemented")
}
func (UnimplementedCompositingServiceServer) UnloadModel(context.Context, *UnloadModelRequest) (*UnloadModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnloadModel not implemented")
}
func (UnimplementedCompositingServiceServer) GetModelStats(context.Context, *GetModelStatsRequest) (*GetModelStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModelStats not implemented")
}
func (UnimplementedCompositingServiceServer) Health(context.Context, *HealthRequest) (*HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}
func (UnimplementedCompositingServiceServer) mustEmbedUnimplementedCompositingServiceServer() {}
func (UnimplementedCompositingServiceServer) testEmbeddedByValue()                            {}

// UnsafeCompositingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CompositingServiceServer will
// result in compilation errors.
type UnsafeCompositingServiceServer interface {
	mustEmbedUnimplementedCompositingServiceServer()
}

func RegisterCompositingServiceServer(s grpc.ServiceRegistrar, srv CompositingServiceServer) {
	// If the following call pancis, it indicates UnimplementedCompositingServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CompositingService_ServiceDesc, srv)
}

func _CompositingService_InferBatchComposite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompositeBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompositingServiceServer).InferBatchComposite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompositingService_InferBatchComposite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompositingServiceServer).InferBatchComposite(ctx, req.(*CompositeBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompositingService_ListModels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListModelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompositingServiceServer).ListModels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompositingService_ListModels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompositingServiceServer).ListModels(ctx, req.(*ListModelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompositingService_LoadModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompositingServiceServer).LoadModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompositingService_LoadModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompositingServiceServer).LoadModel(ctx, req.(*LoadModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompositingService_UnloadModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnloadModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompositingServiceServer).UnloadModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompositingService_UnloadModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompositingServiceServer).UnloadModel(ctx, req.(*UnloadModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompositingService_GetModelStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModelStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompositingServiceServer).GetModelStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompositingService_GetModelStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompositingServiceServer).GetModelStats(ctx, req.(*GetModelStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompositingService_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompositingServiceServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompositingService_Health_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompositingServiceServer).Health(ctx, req.(*HealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CompositingService_ServiceDesc is the grpc.ServiceDesc for CompositingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CompositingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "compositing.CompositingService",
	HandlerType: (*CompositingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InferBatchComposite",
			Handler:    _CompositingService_InferBatchComposite_Handler,
		},
		{
			MethodName: "ListModels",
			Handler:    _CompositingService_ListModels_Handler,
		},
		{
			MethodName: "LoadModel",
			Handler:    _CompositingService_LoadModel_Handler,
		},
		{
			MethodName: "UnloadModel",
			Handler:    _CompositingService_UnloadModel_Handler,
		},
		{
			MethodName: "GetModelStats",
			Handler:    _CompositingService_GetModelStats_Handler,
		},
		{
			MethodName: "Health",
			Handler:    _CompositingService_Health_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/compositing.proto",
}
