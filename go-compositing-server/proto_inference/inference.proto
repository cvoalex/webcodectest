syntax = "proto3";

package inference;

option go_package = "go-compositing-server/proto_inference";

// InferenceService provides GPU-accelerated lip sync inference only.
service InferenceService {
    rpc InferBatch(InferBatchRequest) returns (InferBatchResponse);
    rpc ListModels(ListModelsRequest) returns (ListModelsResponse);
    rpc LoadModel(LoadModelRequest) returns (LoadModelResponse);
    rpc UnloadModel(UnloadModelRequest) returns (UnloadModelRequest);
    rpc GetModelStats(GetModelStatsRequest) returns (GetModelStatsResponse);
    rpc Health(HealthRequest) returns (HealthResponse);
}

message InferBatchRequest {
    string model_id = 1;
    bytes visual_frames = 2;
    bytes audio_features = 3;
    int32 batch_size = 4;
}

message InferBatchResponse {
    repeated RawMouthRegion outputs = 1;
    float inference_time_ms = 2;
    bool success = 3;
    string error = 4;
    int32 worker_id = 5;
    int32 gpu_id = 6;
}

message RawMouthRegion {
    bytes data = 1;
}

message ListModelsRequest {}

message ListModelsResponse {
    repeated ModelInfo models = 1;
}

message LoadModelRequest {
    string model_id = 1;
    bool force_reload = 2;
}

message LoadModelResponse {
    bool success = 1;
    string error = 2;
    float load_time_ms = 3;
    ModelStats stats = 4;
}

message UnloadModelRequest {
    string model_id = 1;
}

message UnloadModelResponse {
    bool success = 1;
    string error = 2;
}

message GetModelStatsRequest {
    string model_id = 1;
}

message GetModelStatsResponse {
    repeated ModelInfo models = 1;
    int32 max_models = 2;
    int32 loaded_models = 3;
    int64 total_memory_bytes = 4;
    int64 max_memory_bytes = 5;
}

message HealthRequest {}

message HealthResponse {
    bool healthy = 1;
    bool cuda_available = 2;
    int32 loaded_models = 3;
    int32 max_models = 4;
    int32 gpu_count = 5;
    string version = 6;
    repeated GPUInfo gpus = 7;
}

message GPUInfo {
    int32 gpu_id = 1;
    string name = 2;
    int64 total_memory_bytes = 3;
    int64 used_memory_bytes = 4;
    int32 loaded_models = 5;
}

message ModelInfo {
    string model_id = 1;
    bool loaded = 2;
    string model_path = 3;
    ModelStats stats = 4;
    int32 gpu_id = 5;
}

message ModelStats {
    int64 usage_count = 1;
    int64 last_used_unix_ms = 2;
    double total_inference_time_ms = 3;
    int64 memory_bytes = 4;
    int64 loaded_unix_ms = 5;
}
