// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.33.0
// source: proto/monolithic.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MonolithicService_InferBatchComposite_FullMethodName = "/monolithic.MonolithicService/InferBatchComposite"
	MonolithicService_ListModels_FullMethodName          = "/monolithic.MonolithicService/ListModels"
	MonolithicService_LoadModel_FullMethodName           = "/monolithic.MonolithicService/LoadModel"
	MonolithicService_UnloadModel_FullMethodName         = "/monolithic.MonolithicService/UnloadModel"
	MonolithicService_GetModelStats_FullMethodName       = "/monolithic.MonolithicService/GetModelStats"
	MonolithicService_Health_FullMethodName              = "/monolithic.MonolithicService/Health"
)

// MonolithicServiceClient is the client API for MonolithicService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// MonolithicService provides inference + compositing in a single process
type MonolithicServiceClient interface {
	// InferBatchComposite performs inference + compositing + encoding
	InferBatchComposite(ctx context.Context, in *CompositeBatchRequest, opts ...grpc.CallOption) (*CompositeBatchResponse, error)
	// ListModels returns available models
	ListModels(ctx context.Context, in *ListModelsRequest, opts ...grpc.CallOption) (*ListModelsResponse, error)
	// LoadModel explicitly loads a model
	LoadModel(ctx context.Context, in *LoadModelRequest, opts ...grpc.CallOption) (*LoadModelResponse, error)
	// UnloadModel explicitly unloads a model
	UnloadModel(ctx context.Context, in *UnloadModelRequest, opts ...grpc.CallOption) (*UnloadModelResponse, error)
	// GetModelStats returns usage statistics
	GetModelStats(ctx context.Context, in *GetModelStatsRequest, opts ...grpc.CallOption) (*GetModelStatsResponse, error)
	// Health returns server health status
	Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error)
}

type monolithicServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMonolithicServiceClient(cc grpc.ClientConnInterface) MonolithicServiceClient {
	return &monolithicServiceClient{cc}
}

func (c *monolithicServiceClient) InferBatchComposite(ctx context.Context, in *CompositeBatchRequest, opts ...grpc.CallOption) (*CompositeBatchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CompositeBatchResponse)
	err := c.cc.Invoke(ctx, MonolithicService_InferBatchComposite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monolithicServiceClient) ListModels(ctx context.Context, in *ListModelsRequest, opts ...grpc.CallOption) (*ListModelsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListModelsResponse)
	err := c.cc.Invoke(ctx, MonolithicService_ListModels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monolithicServiceClient) LoadModel(ctx context.Context, in *LoadModelRequest, opts ...grpc.CallOption) (*LoadModelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoadModelResponse)
	err := c.cc.Invoke(ctx, MonolithicService_LoadModel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monolithicServiceClient) UnloadModel(ctx context.Context, in *UnloadModelRequest, opts ...grpc.CallOption) (*UnloadModelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnloadModelResponse)
	err := c.cc.Invoke(ctx, MonolithicService_UnloadModel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monolithicServiceClient) GetModelStats(ctx context.Context, in *GetModelStatsRequest, opts ...grpc.CallOption) (*GetModelStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetModelStatsResponse)
	err := c.cc.Invoke(ctx, MonolithicService_GetModelStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monolithicServiceClient) Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, MonolithicService_Health_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MonolithicServiceServer is the server API for MonolithicService service.
// All implementations must embed UnimplementedMonolithicServiceServer
// for forward compatibility.
//
// MonolithicService provides inference + compositing in a single process
type MonolithicServiceServer interface {
	// InferBatchComposite performs inference + compositing + encoding
	InferBatchComposite(context.Context, *CompositeBatchRequest) (*CompositeBatchResponse, error)
	// ListModels returns available models
	ListModels(context.Context, *ListModelsRequest) (*ListModelsResponse, error)
	// LoadModel explicitly loads a model
	LoadModel(context.Context, *LoadModelRequest) (*LoadModelResponse, error)
	// UnloadModel explicitly unloads a model
	UnloadModel(context.Context, *UnloadModelRequest) (*UnloadModelResponse, error)
	// GetModelStats returns usage statistics
	GetModelStats(context.Context, *GetModelStatsRequest) (*GetModelStatsResponse, error)
	// Health returns server health status
	Health(context.Context, *HealthRequest) (*HealthResponse, error)
	mustEmbedUnimplementedMonolithicServiceServer()
}

// UnimplementedMonolithicServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMonolithicServiceServer struct{}

func (UnimplementedMonolithicServiceServer) InferBatchComposite(context.Context, *CompositeBatchRequest) (*CompositeBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InferBatchComposite not implemented")
}
func (UnimplementedMonolithicServiceServer) ListModels(context.Context, *ListModelsRequest) (*ListModelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListModels not implemented")
}
func (UnimplementedMonolithicServiceServer) LoadModel(context.Context, *LoadModelRequest) (*LoadModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadModel not implemented")
}
func (UnimplementedMonolithicServiceServer) UnloadModel(context.Context, *UnloadModelRequest) (*UnloadModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnloadModel not implemented")
}
func (UnimplementedMonolithicServiceServer) GetModelStats(context.Context, *GetModelStatsRequest) (*GetModelStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModelStats not implemented")
}
func (UnimplementedMonolithicServiceServer) Health(context.Context, *HealthRequest) (*HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}
func (UnimplementedMonolithicServiceServer) mustEmbedUnimplementedMonolithicServiceServer() {}
func (UnimplementedMonolithicServiceServer) testEmbeddedByValue()                           {}

// UnsafeMonolithicServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MonolithicServiceServer will
// result in compilation errors.
type UnsafeMonolithicServiceServer interface {
	mustEmbedUnimplementedMonolithicServiceServer()
}

func RegisterMonolithicServiceServer(s grpc.ServiceRegistrar, srv MonolithicServiceServer) {
	// If the following call pancis, it indicates UnimplementedMonolithicServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MonolithicService_ServiceDesc, srv)
}

func _MonolithicService_InferBatchComposite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompositeBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonolithicServiceServer).InferBatchComposite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MonolithicService_InferBatchComposite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonolithicServiceServer).InferBatchComposite(ctx, req.(*CompositeBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonolithicService_ListModels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListModelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonolithicServiceServer).ListModels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MonolithicService_ListModels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonolithicServiceServer).ListModels(ctx, req.(*ListModelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonolithicService_LoadModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonolithicServiceServer).LoadModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MonolithicService_LoadModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonolithicServiceServer).LoadModel(ctx, req.(*LoadModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonolithicService_UnloadModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnloadModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonolithicServiceServer).UnloadModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MonolithicService_UnloadModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonolithicServiceServer).UnloadModel(ctx, req.(*UnloadModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonolithicService_GetModelStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModelStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonolithicServiceServer).GetModelStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MonolithicService_GetModelStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonolithicServiceServer).GetModelStats(ctx, req.(*GetModelStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonolithicService_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonolithicServiceServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MonolithicService_Health_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonolithicServiceServer).Health(ctx, req.(*HealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MonolithicService_ServiceDesc is the grpc.ServiceDesc for MonolithicService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MonolithicService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "monolithic.MonolithicService",
	HandlerType: (*MonolithicServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InferBatchComposite",
			Handler:    _MonolithicService_InferBatchComposite_Handler,
		},
		{
			MethodName: "ListModels",
			Handler:    _MonolithicService_ListModels_Handler,
		},
		{
			MethodName: "LoadModel",
			Handler:    _MonolithicService_LoadModel_Handler,
		},
		{
			MethodName: "UnloadModel",
			Handler:    _MonolithicService_UnloadModel_Handler,
		},
		{
			MethodName: "GetModelStats",
			Handler:    _MonolithicService_GetModelStats_Handler,
		},
		{
			MethodName: "Health",
			Handler:    _MonolithicService_Health_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/monolithic.proto",
}
