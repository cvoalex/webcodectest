// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: optimized_lipsyncsrv.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	OptimizedLipSyncService_GenerateInference_FullMethodName      = "/optimized_lipsyncsrv.OptimizedLipSyncService/GenerateInference"
	OptimizedLipSyncService_GenerateBatchInference_FullMethodName = "/optimized_lipsyncsrv.OptimizedLipSyncService/GenerateBatchInference"
	OptimizedLipSyncService_GenerateBatchWithAudio_FullMethodName = "/optimized_lipsyncsrv.OptimizedLipSyncService/GenerateBatchWithAudio"
	OptimizedLipSyncService_StreamInference_FullMethodName        = "/optimized_lipsyncsrv.OptimizedLipSyncService/StreamInference"
	OptimizedLipSyncService_LoadPackage_FullMethodName            = "/optimized_lipsyncsrv.OptimizedLipSyncService/LoadPackage"
	OptimizedLipSyncService_GetStats_FullMethodName               = "/optimized_lipsyncsrv.OptimizedLipSyncService/GetStats"
	OptimizedLipSyncService_ListModels_FullMethodName             = "/optimized_lipsyncsrv.OptimizedLipSyncService/ListModels"
	OptimizedLipSyncService_HealthCheck_FullMethodName            = "/optimized_lipsyncsrv.OptimizedLipSyncService/HealthCheck"
	OptimizedLipSyncService_GetVideoFrame_FullMethodName          = "/optimized_lipsyncsrv.OptimizedLipSyncService/GetVideoFrame"
	OptimizedLipSyncService_GetModelMetadata_FullMethodName       = "/optimized_lipsyncsrv.OptimizedLipSyncService/GetModelMetadata"
)

// OptimizedLipSyncServiceClient is the client API for OptimizedLipSyncService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service definition for optimized lip sync
type OptimizedLipSyncServiceClient interface {
	// Single frame inference (optimized)
	GenerateInference(ctx context.Context, in *OptimizedInferenceRequest, opts ...grpc.CallOption) (*OptimizedInferenceResponse, error)
	// Batch inference for multiple frames (uses pre-extracted features)
	GenerateBatchInference(ctx context.Context, in *BatchInferenceRequest, opts ...grpc.CallOption) (*BatchInferenceResponse, error)
	// Optimized batch inference with audio chunks (avoids redundant data transfer)
	GenerateBatchWithAudio(ctx context.Context, in *BatchInferenceWithAudioRequest, opts ...grpc.CallOption) (*BatchInferenceResponse, error)
	// Streaming inference for real-time applications (50+ FPS capable)
	StreamInference(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[OptimizedInferenceRequest, OptimizedInferenceResponse], error)
	// Model package management
	LoadPackage(ctx context.Context, in *LoadPackageRequest, opts ...grpc.CallOption) (*LoadPackageResponse, error)
	// Get statistics
	GetStats(ctx context.Context, in *StatsRequest, opts ...grpc.CallOption) (*StatsResponse, error)
	// List loaded models
	ListModels(ctx context.Context, in *ListModelsRequest, opts ...grpc.CallOption) (*ListModelsResponse, error)
	// Health check
	HealthCheck(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error)
	// Get video frame from model
	GetVideoFrame(ctx context.Context, in *GetVideoFrameRequest, opts ...grpc.CallOption) (*GetVideoFrameResponse, error)
	// Get model metadata
	GetModelMetadata(ctx context.Context, in *GetModelMetadataRequest, opts ...grpc.CallOption) (*GetModelMetadataResponse, error)
}

type optimizedLipSyncServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOptimizedLipSyncServiceClient(cc grpc.ClientConnInterface) OptimizedLipSyncServiceClient {
	return &optimizedLipSyncServiceClient{cc}
}

func (c *optimizedLipSyncServiceClient) GenerateInference(ctx context.Context, in *OptimizedInferenceRequest, opts ...grpc.CallOption) (*OptimizedInferenceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OptimizedInferenceResponse)
	err := c.cc.Invoke(ctx, OptimizedLipSyncService_GenerateInference_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *optimizedLipSyncServiceClient) GenerateBatchInference(ctx context.Context, in *BatchInferenceRequest, opts ...grpc.CallOption) (*BatchInferenceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchInferenceResponse)
	err := c.cc.Invoke(ctx, OptimizedLipSyncService_GenerateBatchInference_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *optimizedLipSyncServiceClient) GenerateBatchWithAudio(ctx context.Context, in *BatchInferenceWithAudioRequest, opts ...grpc.CallOption) (*BatchInferenceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchInferenceResponse)
	err := c.cc.Invoke(ctx, OptimizedLipSyncService_GenerateBatchWithAudio_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *optimizedLipSyncServiceClient) StreamInference(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[OptimizedInferenceRequest, OptimizedInferenceResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &OptimizedLipSyncService_ServiceDesc.Streams[0], OptimizedLipSyncService_StreamInference_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[OptimizedInferenceRequest, OptimizedInferenceResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type OptimizedLipSyncService_StreamInferenceClient = grpc.BidiStreamingClient[OptimizedInferenceRequest, OptimizedInferenceResponse]

func (c *optimizedLipSyncServiceClient) LoadPackage(ctx context.Context, in *LoadPackageRequest, opts ...grpc.CallOption) (*LoadPackageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoadPackageResponse)
	err := c.cc.Invoke(ctx, OptimizedLipSyncService_LoadPackage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *optimizedLipSyncServiceClient) GetStats(ctx context.Context, in *StatsRequest, opts ...grpc.CallOption) (*StatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatsResponse)
	err := c.cc.Invoke(ctx, OptimizedLipSyncService_GetStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *optimizedLipSyncServiceClient) ListModels(ctx context.Context, in *ListModelsRequest, opts ...grpc.CallOption) (*ListModelsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListModelsResponse)
	err := c.cc.Invoke(ctx, OptimizedLipSyncService_ListModels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *optimizedLipSyncServiceClient) HealthCheck(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, OptimizedLipSyncService_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *optimizedLipSyncServiceClient) GetVideoFrame(ctx context.Context, in *GetVideoFrameRequest, opts ...grpc.CallOption) (*GetVideoFrameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetVideoFrameResponse)
	err := c.cc.Invoke(ctx, OptimizedLipSyncService_GetVideoFrame_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *optimizedLipSyncServiceClient) GetModelMetadata(ctx context.Context, in *GetModelMetadataRequest, opts ...grpc.CallOption) (*GetModelMetadataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetModelMetadataResponse)
	err := c.cc.Invoke(ctx, OptimizedLipSyncService_GetModelMetadata_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OptimizedLipSyncServiceServer is the server API for OptimizedLipSyncService service.
// All implementations must embed UnimplementedOptimizedLipSyncServiceServer
// for forward compatibility.
//
// Service definition for optimized lip sync
type OptimizedLipSyncServiceServer interface {
	// Single frame inference (optimized)
	GenerateInference(context.Context, *OptimizedInferenceRequest) (*OptimizedInferenceResponse, error)
	// Batch inference for multiple frames (uses pre-extracted features)
	GenerateBatchInference(context.Context, *BatchInferenceRequest) (*BatchInferenceResponse, error)
	// Optimized batch inference with audio chunks (avoids redundant data transfer)
	GenerateBatchWithAudio(context.Context, *BatchInferenceWithAudioRequest) (*BatchInferenceResponse, error)
	// Streaming inference for real-time applications (50+ FPS capable)
	StreamInference(grpc.BidiStreamingServer[OptimizedInferenceRequest, OptimizedInferenceResponse]) error
	// Model package management
	LoadPackage(context.Context, *LoadPackageRequest) (*LoadPackageResponse, error)
	// Get statistics
	GetStats(context.Context, *StatsRequest) (*StatsResponse, error)
	// List loaded models
	ListModels(context.Context, *ListModelsRequest) (*ListModelsResponse, error)
	// Health check
	HealthCheck(context.Context, *HealthRequest) (*HealthResponse, error)
	// Get video frame from model
	GetVideoFrame(context.Context, *GetVideoFrameRequest) (*GetVideoFrameResponse, error)
	// Get model metadata
	GetModelMetadata(context.Context, *GetModelMetadataRequest) (*GetModelMetadataResponse, error)
	mustEmbedUnimplementedOptimizedLipSyncServiceServer()
}

// UnimplementedOptimizedLipSyncServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOptimizedLipSyncServiceServer struct{}

func (UnimplementedOptimizedLipSyncServiceServer) GenerateInference(context.Context, *OptimizedInferenceRequest) (*OptimizedInferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateInference not implemented")
}
func (UnimplementedOptimizedLipSyncServiceServer) GenerateBatchInference(context.Context, *BatchInferenceRequest) (*BatchInferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateBatchInference not implemented")
}
func (UnimplementedOptimizedLipSyncServiceServer) GenerateBatchWithAudio(context.Context, *BatchInferenceWithAudioRequest) (*BatchInferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateBatchWithAudio not implemented")
}
func (UnimplementedOptimizedLipSyncServiceServer) StreamInference(grpc.BidiStreamingServer[OptimizedInferenceRequest, OptimizedInferenceResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamInference not implemented")
}
func (UnimplementedOptimizedLipSyncServiceServer) LoadPackage(context.Context, *LoadPackageRequest) (*LoadPackageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadPackage not implemented")
}
func (UnimplementedOptimizedLipSyncServiceServer) GetStats(context.Context, *StatsRequest) (*StatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStats not implemented")
}
func (UnimplementedOptimizedLipSyncServiceServer) ListModels(context.Context, *ListModelsRequest) (*ListModelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListModels not implemented")
}
func (UnimplementedOptimizedLipSyncServiceServer) HealthCheck(context.Context, *HealthRequest) (*HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedOptimizedLipSyncServiceServer) GetVideoFrame(context.Context, *GetVideoFrameRequest) (*GetVideoFrameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVideoFrame not implemented")
}
func (UnimplementedOptimizedLipSyncServiceServer) GetModelMetadata(context.Context, *GetModelMetadataRequest) (*GetModelMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModelMetadata not implemented")
}
func (UnimplementedOptimizedLipSyncServiceServer) mustEmbedUnimplementedOptimizedLipSyncServiceServer() {
}
func (UnimplementedOptimizedLipSyncServiceServer) testEmbeddedByValue() {}

// UnsafeOptimizedLipSyncServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OptimizedLipSyncServiceServer will
// result in compilation errors.
type UnsafeOptimizedLipSyncServiceServer interface {
	mustEmbedUnimplementedOptimizedLipSyncServiceServer()
}

func RegisterOptimizedLipSyncServiceServer(s grpc.ServiceRegistrar, srv OptimizedLipSyncServiceServer) {
	// If the following call pancis, it indicates UnimplementedOptimizedLipSyncServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OptimizedLipSyncService_ServiceDesc, srv)
}

func _OptimizedLipSyncService_GenerateInference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OptimizedInferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OptimizedLipSyncServiceServer).GenerateInference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OptimizedLipSyncService_GenerateInference_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OptimizedLipSyncServiceServer).GenerateInference(ctx, req.(*OptimizedInferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OptimizedLipSyncService_GenerateBatchInference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchInferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OptimizedLipSyncServiceServer).GenerateBatchInference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OptimizedLipSyncService_GenerateBatchInference_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OptimizedLipSyncServiceServer).GenerateBatchInference(ctx, req.(*BatchInferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OptimizedLipSyncService_GenerateBatchWithAudio_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchInferenceWithAudioRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OptimizedLipSyncServiceServer).GenerateBatchWithAudio(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OptimizedLipSyncService_GenerateBatchWithAudio_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OptimizedLipSyncServiceServer).GenerateBatchWithAudio(ctx, req.(*BatchInferenceWithAudioRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OptimizedLipSyncService_StreamInference_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(OptimizedLipSyncServiceServer).StreamInference(&grpc.GenericServerStream[OptimizedInferenceRequest, OptimizedInferenceResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type OptimizedLipSyncService_StreamInferenceServer = grpc.BidiStreamingServer[OptimizedInferenceRequest, OptimizedInferenceResponse]

func _OptimizedLipSyncService_LoadPackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadPackageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OptimizedLipSyncServiceServer).LoadPackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OptimizedLipSyncService_LoadPackage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OptimizedLipSyncServiceServer).LoadPackage(ctx, req.(*LoadPackageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OptimizedLipSyncService_GetStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OptimizedLipSyncServiceServer).GetStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OptimizedLipSyncService_GetStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OptimizedLipSyncServiceServer).GetStats(ctx, req.(*StatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OptimizedLipSyncService_ListModels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListModelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OptimizedLipSyncServiceServer).ListModels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OptimizedLipSyncService_ListModels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OptimizedLipSyncServiceServer).ListModels(ctx, req.(*ListModelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OptimizedLipSyncService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OptimizedLipSyncServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OptimizedLipSyncService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OptimizedLipSyncServiceServer).HealthCheck(ctx, req.(*HealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OptimizedLipSyncService_GetVideoFrame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVideoFrameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OptimizedLipSyncServiceServer).GetVideoFrame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OptimizedLipSyncService_GetVideoFrame_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OptimizedLipSyncServiceServer).GetVideoFrame(ctx, req.(*GetVideoFrameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OptimizedLipSyncService_GetModelMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModelMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OptimizedLipSyncServiceServer).GetModelMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OptimizedLipSyncService_GetModelMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OptimizedLipSyncServiceServer).GetModelMetadata(ctx, req.(*GetModelMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OptimizedLipSyncService_ServiceDesc is the grpc.ServiceDesc for OptimizedLipSyncService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OptimizedLipSyncService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "optimized_lipsyncsrv.OptimizedLipSyncService",
	HandlerType: (*OptimizedLipSyncServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateInference",
			Handler:    _OptimizedLipSyncService_GenerateInference_Handler,
		},
		{
			MethodName: "GenerateBatchInference",
			Handler:    _OptimizedLipSyncService_GenerateBatchInference_Handler,
		},
		{
			MethodName: "GenerateBatchWithAudio",
			Handler:    _OptimizedLipSyncService_GenerateBatchWithAudio_Handler,
		},
		{
			MethodName: "LoadPackage",
			Handler:    _OptimizedLipSyncService_LoadPackage_Handler,
		},
		{
			MethodName: "GetStats",
			Handler:    _OptimizedLipSyncService_GetStats_Handler,
		},
		{
			MethodName: "ListModels",
			Handler:    _OptimizedLipSyncService_ListModels_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _OptimizedLipSyncService_HealthCheck_Handler,
		},
		{
			MethodName: "GetVideoFrame",
			Handler:    _OptimizedLipSyncService_GetVideoFrame_Handler,
		},
		{
			MethodName: "GetModelMetadata",
			Handler:    _OptimizedLipSyncService_GetModelMetadata_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamInference",
			Handler:       _OptimizedLipSyncService_StreamInference_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "optimized_lipsyncsrv.proto",
}
