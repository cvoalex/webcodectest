syntax = "proto3";

package optimized_lipsyncsrv;

option go_package = "./pb";

// Request for optimized inference (uses pre-processed data)
message OptimizedInferenceRequest {
    string model_name = 1;
    int32 frame_id = 2;
    // No audio_override needed - uses pre-extracted features!
}

// Response with prediction and metadata
message OptimizedInferenceResponse {
    bool success = 1;
    bytes prediction_data = 2;  // JPEG encoded prediction image
    repeated float bounds = 3;  // Bounds array [x1, y1, x2, y2]
    int32 processing_time_ms = 4;
    string model_name = 5;
    int32 frame_id = 6;
    string prediction_shape = 7;  // e.g., "320x320x3"
    optional string error = 8;
    
    // Performance metadata
    double prepare_time_ms = 9;
    double inference_time_ms = 10;
    double composite_time_ms = 11;
    repeated string optimizations = 12;  // Active optimizations
}

// Batch request for multiple frames
message BatchInferenceRequest {
    string model_name = 1;
    repeated int32 frame_ids = 2;
}

// Batch response
message BatchInferenceResponse {
    repeated OptimizedInferenceResponse responses = 1;
    int32 total_processing_time_ms = 2;
    double avg_frame_time_ms = 3;
}

// Model package loading request
message LoadPackageRequest {
    string package_name = 1;
    string package_dir = 2;
}

// Model package loading response
message LoadPackageResponse {
    bool success = 1;
    string package_name = 2;
    string message = 3;
    int32 initialization_time_ms = 4;
    int32 frame_count = 5;
    string device = 6;
    repeated string videos_loaded = 7;
    repeated int32 audio_features_shape = 8;
    bool memory_mapped_audio = 9;
    optional string error = 10;
}

// Stats request
message StatsRequest {
    string model_name = 1;
}

// Stats response
message StatsResponse {
    string model_name = 1;
    int32 total_requests = 2;
    double avg_inference_time_ms = 3;
    double min_inference_time_ms = 4;
    double max_inference_time_ms = 5;
    int32 frame_count = 6;
    string device = 7;
    repeated string optimizations_active = 8;
}

// List models request
message ListModelsRequest {
    // Empty request
}

// List models response
message ListModelsResponse {
    repeated string loaded_models = 1;
    int32 count = 2;
}

// Health check request
message HealthRequest {
    // Empty request
}

// Health check response
message HealthResponse {
    bool healthy = 1;
    string status = 2;
    int32 loaded_models = 3;
    int64 uptime_seconds = 4;
}

// Get video frame request
message GetVideoFrameRequest {
    string model_name = 1;
    int32 frame_id = 2;
    string video_type = 3;  // "full_body", "face_regions", "masked_regions"
}

// Get video frame response
message GetVideoFrameResponse {
    bool success = 1;
    bytes frame_data = 2;  // JPEG encoded original video frame
    int32 frame_id = 3;
    string video_type = 4;
    optional string error = 5;
}

// Get model metadata request
message GetModelMetadataRequest {
    string model_name = 1;
}

// Get model metadata response
message GetModelMetadataResponse {
    bool success = 1;
    string model_name = 2;
    int32 frame_count = 3;
    repeated string available_videos = 4;  // ["full_body", "face_regions", "masked_regions"]
    string audio_path = 5;  // Relative path to audio file
    repeated float bounds = 6;  // Default face bounds [x1, y1, x2, y2]
    optional string error = 7;
}

// Service definition for optimized lip sync
service OptimizedLipSyncService {
    // Single frame inference (optimized)
    rpc GenerateInference(OptimizedInferenceRequest) returns (OptimizedInferenceResponse);
    
    // Batch inference for multiple frames
    rpc GenerateBatchInference(BatchInferenceRequest) returns (BatchInferenceResponse);
    
    // Streaming inference for real-time applications (50+ FPS capable)
    rpc StreamInference(stream OptimizedInferenceRequest) returns (stream OptimizedInferenceResponse);
    
    // Model package management
    rpc LoadPackage(LoadPackageRequest) returns (LoadPackageResponse);
    
    // Get statistics
    rpc GetStats(StatsRequest) returns (StatsResponse);
    
    // List loaded models
    rpc ListModels(ListModelsRequest) returns (ListModelsResponse);
    
    // Health check
    rpc HealthCheck(HealthRequest) returns (HealthResponse);
    
    // Get video frame from model
    rpc GetVideoFrame(GetVideoFrameRequest) returns (GetVideoFrameResponse);
    
    // Get model metadata
    rpc GetModelMetadata(GetModelMetadataRequest) returns (GetModelMetadataResponse);
}
