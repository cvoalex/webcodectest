# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import optimized_lipsyncsrv_pb2 as optimized__lipsyncsrv__pb2

GRPC_GENERATED_VERSION = '1.74.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in optimized_lipsyncsrv_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class OptimizedLipSyncServiceStub(object):
    """Service definition for optimized lip sync
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GenerateInference = channel.unary_unary(
                '/optimized_lipsyncsrv.OptimizedLipSyncService/GenerateInference',
                request_serializer=optimized__lipsyncsrv__pb2.OptimizedInferenceRequest.SerializeToString,
                response_deserializer=optimized__lipsyncsrv__pb2.OptimizedInferenceResponse.FromString,
                _registered_method=True)
        self.GenerateBatchInference = channel.unary_unary(
                '/optimized_lipsyncsrv.OptimizedLipSyncService/GenerateBatchInference',
                request_serializer=optimized__lipsyncsrv__pb2.BatchInferenceRequest.SerializeToString,
                response_deserializer=optimized__lipsyncsrv__pb2.BatchInferenceResponse.FromString,
                _registered_method=True)
        self.StreamInference = channel.stream_stream(
                '/optimized_lipsyncsrv.OptimizedLipSyncService/StreamInference',
                request_serializer=optimized__lipsyncsrv__pb2.OptimizedInferenceRequest.SerializeToString,
                response_deserializer=optimized__lipsyncsrv__pb2.OptimizedInferenceResponse.FromString,
                _registered_method=True)
        self.LoadPackage = channel.unary_unary(
                '/optimized_lipsyncsrv.OptimizedLipSyncService/LoadPackage',
                request_serializer=optimized__lipsyncsrv__pb2.LoadPackageRequest.SerializeToString,
                response_deserializer=optimized__lipsyncsrv__pb2.LoadPackageResponse.FromString,
                _registered_method=True)
        self.GetStats = channel.unary_unary(
                '/optimized_lipsyncsrv.OptimizedLipSyncService/GetStats',
                request_serializer=optimized__lipsyncsrv__pb2.StatsRequest.SerializeToString,
                response_deserializer=optimized__lipsyncsrv__pb2.StatsResponse.FromString,
                _registered_method=True)
        self.ListModels = channel.unary_unary(
                '/optimized_lipsyncsrv.OptimizedLipSyncService/ListModels',
                request_serializer=optimized__lipsyncsrv__pb2.ListModelsRequest.SerializeToString,
                response_deserializer=optimized__lipsyncsrv__pb2.ListModelsResponse.FromString,
                _registered_method=True)
        self.HealthCheck = channel.unary_unary(
                '/optimized_lipsyncsrv.OptimizedLipSyncService/HealthCheck',
                request_serializer=optimized__lipsyncsrv__pb2.HealthRequest.SerializeToString,
                response_deserializer=optimized__lipsyncsrv__pb2.HealthResponse.FromString,
                _registered_method=True)
        self.GetVideoFrame = channel.unary_unary(
                '/optimized_lipsyncsrv.OptimizedLipSyncService/GetVideoFrame',
                request_serializer=optimized__lipsyncsrv__pb2.GetVideoFrameRequest.SerializeToString,
                response_deserializer=optimized__lipsyncsrv__pb2.GetVideoFrameResponse.FromString,
                _registered_method=True)
        self.GetModelMetadata = channel.unary_unary(
                '/optimized_lipsyncsrv.OptimizedLipSyncService/GetModelMetadata',
                request_serializer=optimized__lipsyncsrv__pb2.GetModelMetadataRequest.SerializeToString,
                response_deserializer=optimized__lipsyncsrv__pb2.GetModelMetadataResponse.FromString,
                _registered_method=True)


class OptimizedLipSyncServiceServicer(object):
    """Service definition for optimized lip sync
    """

    def GenerateInference(self, request, context):
        """Single frame inference (optimized)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GenerateBatchInference(self, request, context):
        """Batch inference for multiple frames
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamInference(self, request_iterator, context):
        """Streaming inference for real-time applications (50+ FPS capable)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LoadPackage(self, request, context):
        """Model package management
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetStats(self, request, context):
        """Get statistics
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListModels(self, request, context):
        """List loaded models
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HealthCheck(self, request, context):
        """Health check
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetVideoFrame(self, request, context):
        """Get video frame from model
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetModelMetadata(self, request, context):
        """Get model metadata
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_OptimizedLipSyncServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GenerateInference': grpc.unary_unary_rpc_method_handler(
                    servicer.GenerateInference,
                    request_deserializer=optimized__lipsyncsrv__pb2.OptimizedInferenceRequest.FromString,
                    response_serializer=optimized__lipsyncsrv__pb2.OptimizedInferenceResponse.SerializeToString,
            ),
            'GenerateBatchInference': grpc.unary_unary_rpc_method_handler(
                    servicer.GenerateBatchInference,
                    request_deserializer=optimized__lipsyncsrv__pb2.BatchInferenceRequest.FromString,
                    response_serializer=optimized__lipsyncsrv__pb2.BatchInferenceResponse.SerializeToString,
            ),
            'StreamInference': grpc.stream_stream_rpc_method_handler(
                    servicer.StreamInference,
                    request_deserializer=optimized__lipsyncsrv__pb2.OptimizedInferenceRequest.FromString,
                    response_serializer=optimized__lipsyncsrv__pb2.OptimizedInferenceResponse.SerializeToString,
            ),
            'LoadPackage': grpc.unary_unary_rpc_method_handler(
                    servicer.LoadPackage,
                    request_deserializer=optimized__lipsyncsrv__pb2.LoadPackageRequest.FromString,
                    response_serializer=optimized__lipsyncsrv__pb2.LoadPackageResponse.SerializeToString,
            ),
            'GetStats': grpc.unary_unary_rpc_method_handler(
                    servicer.GetStats,
                    request_deserializer=optimized__lipsyncsrv__pb2.StatsRequest.FromString,
                    response_serializer=optimized__lipsyncsrv__pb2.StatsResponse.SerializeToString,
            ),
            'ListModels': grpc.unary_unary_rpc_method_handler(
                    servicer.ListModels,
                    request_deserializer=optimized__lipsyncsrv__pb2.ListModelsRequest.FromString,
                    response_serializer=optimized__lipsyncsrv__pb2.ListModelsResponse.SerializeToString,
            ),
            'HealthCheck': grpc.unary_unary_rpc_method_handler(
                    servicer.HealthCheck,
                    request_deserializer=optimized__lipsyncsrv__pb2.HealthRequest.FromString,
                    response_serializer=optimized__lipsyncsrv__pb2.HealthResponse.SerializeToString,
            ),
            'GetVideoFrame': grpc.unary_unary_rpc_method_handler(
                    servicer.GetVideoFrame,
                    request_deserializer=optimized__lipsyncsrv__pb2.GetVideoFrameRequest.FromString,
                    response_serializer=optimized__lipsyncsrv__pb2.GetVideoFrameResponse.SerializeToString,
            ),
            'GetModelMetadata': grpc.unary_unary_rpc_method_handler(
                    servicer.GetModelMetadata,
                    request_deserializer=optimized__lipsyncsrv__pb2.GetModelMetadataRequest.FromString,
                    response_serializer=optimized__lipsyncsrv__pb2.GetModelMetadataResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'optimized_lipsyncsrv.OptimizedLipSyncService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('optimized_lipsyncsrv.OptimizedLipSyncService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class OptimizedLipSyncService(object):
    """Service definition for optimized lip sync
    """

    @staticmethod
    def GenerateInference(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/optimized_lipsyncsrv.OptimizedLipSyncService/GenerateInference',
            optimized__lipsyncsrv__pb2.OptimizedInferenceRequest.SerializeToString,
            optimized__lipsyncsrv__pb2.OptimizedInferenceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GenerateBatchInference(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/optimized_lipsyncsrv.OptimizedLipSyncService/GenerateBatchInference',
            optimized__lipsyncsrv__pb2.BatchInferenceRequest.SerializeToString,
            optimized__lipsyncsrv__pb2.BatchInferenceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamInference(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/optimized_lipsyncsrv.OptimizedLipSyncService/StreamInference',
            optimized__lipsyncsrv__pb2.OptimizedInferenceRequest.SerializeToString,
            optimized__lipsyncsrv__pb2.OptimizedInferenceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def LoadPackage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/optimized_lipsyncsrv.OptimizedLipSyncService/LoadPackage',
            optimized__lipsyncsrv__pb2.LoadPackageRequest.SerializeToString,
            optimized__lipsyncsrv__pb2.LoadPackageResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetStats(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/optimized_lipsyncsrv.OptimizedLipSyncService/GetStats',
            optimized__lipsyncsrv__pb2.StatsRequest.SerializeToString,
            optimized__lipsyncsrv__pb2.StatsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListModels(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/optimized_lipsyncsrv.OptimizedLipSyncService/ListModels',
            optimized__lipsyncsrv__pb2.ListModelsRequest.SerializeToString,
            optimized__lipsyncsrv__pb2.ListModelsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def HealthCheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/optimized_lipsyncsrv.OptimizedLipSyncService/HealthCheck',
            optimized__lipsyncsrv__pb2.HealthRequest.SerializeToString,
            optimized__lipsyncsrv__pb2.HealthResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetVideoFrame(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/optimized_lipsyncsrv.OptimizedLipSyncService/GetVideoFrame',
            optimized__lipsyncsrv__pb2.GetVideoFrameRequest.SerializeToString,
            optimized__lipsyncsrv__pb2.GetVideoFrameResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetModelMetadata(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/optimized_lipsyncsrv.OptimizedLipSyncService/GetModelMetadata',
            optimized__lipsyncsrv__pb2.GetModelMetadataRequest.SerializeToString,
            optimized__lipsyncsrv__pb2.GetModelMetadataResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
