// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.33.0
// source: proto/multitenant.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MultiTenantLipSync_InferBatchComposite_FullMethodName = "/lipsync.MultiTenantLipSync/InferBatchComposite"
	MultiTenantLipSync_ListModels_FullMethodName          = "/lipsync.MultiTenantLipSync/ListModels"
	MultiTenantLipSync_LoadModel_FullMethodName           = "/lipsync.MultiTenantLipSync/LoadModel"
	MultiTenantLipSync_UnloadModel_FullMethodName         = "/lipsync.MultiTenantLipSync/UnloadModel"
	MultiTenantLipSync_GetModelStats_FullMethodName       = "/lipsync.MultiTenantLipSync/GetModelStats"
	MultiTenantLipSync_Health_FullMethodName              = "/lipsync.MultiTenantLipSync/Health"
)

// MultiTenantLipSyncClient is the client API for MultiTenantLipSync service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Multi-tenant LipSync service with dynamic model loading and management
type MultiTenantLipSyncClient interface {
	// Process batch with specific model (auto-loads if needed)
	InferBatchComposite(ctx context.Context, in *CompositeBatchRequest, opts ...grpc.CallOption) (*CompositeBatchResponse, error)
	// Model management operations
	ListModels(ctx context.Context, in *ListModelsRequest, opts ...grpc.CallOption) (*ListModelsResponse, error)
	LoadModel(ctx context.Context, in *LoadModelRequest, opts ...grpc.CallOption) (*LoadModelResponse, error)
	UnloadModel(ctx context.Context, in *UnloadModelRequest, opts ...grpc.CallOption) (*UnloadModelResponse, error)
	GetModelStats(ctx context.Context, in *GetModelStatsRequest, opts ...grpc.CallOption) (*GetModelStatsResponse, error)
	// Health check
	Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error)
}

type multiTenantLipSyncClient struct {
	cc grpc.ClientConnInterface
}

func NewMultiTenantLipSyncClient(cc grpc.ClientConnInterface) MultiTenantLipSyncClient {
	return &multiTenantLipSyncClient{cc}
}

func (c *multiTenantLipSyncClient) InferBatchComposite(ctx context.Context, in *CompositeBatchRequest, opts ...grpc.CallOption) (*CompositeBatchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CompositeBatchResponse)
	err := c.cc.Invoke(ctx, MultiTenantLipSync_InferBatchComposite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multiTenantLipSyncClient) ListModels(ctx context.Context, in *ListModelsRequest, opts ...grpc.CallOption) (*ListModelsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListModelsResponse)
	err := c.cc.Invoke(ctx, MultiTenantLipSync_ListModels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multiTenantLipSyncClient) LoadModel(ctx context.Context, in *LoadModelRequest, opts ...grpc.CallOption) (*LoadModelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoadModelResponse)
	err := c.cc.Invoke(ctx, MultiTenantLipSync_LoadModel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multiTenantLipSyncClient) UnloadModel(ctx context.Context, in *UnloadModelRequest, opts ...grpc.CallOption) (*UnloadModelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnloadModelResponse)
	err := c.cc.Invoke(ctx, MultiTenantLipSync_UnloadModel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multiTenantLipSyncClient) GetModelStats(ctx context.Context, in *GetModelStatsRequest, opts ...grpc.CallOption) (*GetModelStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetModelStatsResponse)
	err := c.cc.Invoke(ctx, MultiTenantLipSync_GetModelStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multiTenantLipSyncClient) Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, MultiTenantLipSync_Health_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MultiTenantLipSyncServer is the server API for MultiTenantLipSync service.
// All implementations must embed UnimplementedMultiTenantLipSyncServer
// for forward compatibility.
//
// Multi-tenant LipSync service with dynamic model loading and management
type MultiTenantLipSyncServer interface {
	// Process batch with specific model (auto-loads if needed)
	InferBatchComposite(context.Context, *CompositeBatchRequest) (*CompositeBatchResponse, error)
	// Model management operations
	ListModels(context.Context, *ListModelsRequest) (*ListModelsResponse, error)
	LoadModel(context.Context, *LoadModelRequest) (*LoadModelResponse, error)
	UnloadModel(context.Context, *UnloadModelRequest) (*UnloadModelResponse, error)
	GetModelStats(context.Context, *GetModelStatsRequest) (*GetModelStatsResponse, error)
	// Health check
	Health(context.Context, *HealthRequest) (*HealthResponse, error)
	mustEmbedUnimplementedMultiTenantLipSyncServer()
}

// UnimplementedMultiTenantLipSyncServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMultiTenantLipSyncServer struct{}

func (UnimplementedMultiTenantLipSyncServer) InferBatchComposite(context.Context, *CompositeBatchRequest) (*CompositeBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InferBatchComposite not implemented")
}
func (UnimplementedMultiTenantLipSyncServer) ListModels(context.Context, *ListModelsRequest) (*ListModelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListModels not implemented")
}
func (UnimplementedMultiTenantLipSyncServer) LoadModel(context.Context, *LoadModelRequest) (*LoadModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadModel not implemented")
}
func (UnimplementedMultiTenantLipSyncServer) UnloadModel(context.Context, *UnloadModelRequest) (*UnloadModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnloadModel not implemented")
}
func (UnimplementedMultiTenantLipSyncServer) GetModelStats(context.Context, *GetModelStatsRequest) (*GetModelStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModelStats not implemented")
}
func (UnimplementedMultiTenantLipSyncServer) Health(context.Context, *HealthRequest) (*HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}
func (UnimplementedMultiTenantLipSyncServer) mustEmbedUnimplementedMultiTenantLipSyncServer() {}
func (UnimplementedMultiTenantLipSyncServer) testEmbeddedByValue()                            {}

// UnsafeMultiTenantLipSyncServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MultiTenantLipSyncServer will
// result in compilation errors.
type UnsafeMultiTenantLipSyncServer interface {
	mustEmbedUnimplementedMultiTenantLipSyncServer()
}

func RegisterMultiTenantLipSyncServer(s grpc.ServiceRegistrar, srv MultiTenantLipSyncServer) {
	// If the following call pancis, it indicates UnimplementedMultiTenantLipSyncServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MultiTenantLipSync_ServiceDesc, srv)
}

func _MultiTenantLipSync_InferBatchComposite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompositeBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultiTenantLipSyncServer).InferBatchComposite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MultiTenantLipSync_InferBatchComposite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultiTenantLipSyncServer).InferBatchComposite(ctx, req.(*CompositeBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultiTenantLipSync_ListModels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListModelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultiTenantLipSyncServer).ListModels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MultiTenantLipSync_ListModels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultiTenantLipSyncServer).ListModels(ctx, req.(*ListModelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultiTenantLipSync_LoadModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultiTenantLipSyncServer).LoadModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MultiTenantLipSync_LoadModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultiTenantLipSyncServer).LoadModel(ctx, req.(*LoadModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultiTenantLipSync_UnloadModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnloadModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultiTenantLipSyncServer).UnloadModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MultiTenantLipSync_UnloadModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultiTenantLipSyncServer).UnloadModel(ctx, req.(*UnloadModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultiTenantLipSync_GetModelStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModelStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultiTenantLipSyncServer).GetModelStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MultiTenantLipSync_GetModelStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultiTenantLipSyncServer).GetModelStats(ctx, req.(*GetModelStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultiTenantLipSync_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultiTenantLipSyncServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MultiTenantLipSync_Health_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultiTenantLipSyncServer).Health(ctx, req.(*HealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MultiTenantLipSync_ServiceDesc is the grpc.ServiceDesc for MultiTenantLipSync service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MultiTenantLipSync_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lipsync.MultiTenantLipSync",
	HandlerType: (*MultiTenantLipSyncServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InferBatchComposite",
			Handler:    _MultiTenantLipSync_InferBatchComposite_Handler,
		},
		{
			MethodName: "ListModels",
			Handler:    _MultiTenantLipSync_ListModels_Handler,
		},
		{
			MethodName: "LoadModel",
			Handler:    _MultiTenantLipSync_LoadModel_Handler,
		},
		{
			MethodName: "UnloadModel",
			Handler:    _MultiTenantLipSync_UnloadModel_Handler,
		},
		{
			MethodName: "GetModelStats",
			Handler:    _MultiTenantLipSync_GetModelStats_Handler,
		},
		{
			MethodName: "Health",
			Handler:    _MultiTenantLipSync_Health_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/multitenant.proto",
}
