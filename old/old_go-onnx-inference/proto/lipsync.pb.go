// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v6.33.0
// source: proto/lipsync.proto

package lipsync

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BatchRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Visual frames: flattened array [batch_size * 6 * 320 * 320]
	// Each frame is 6 channels (RGB + masked RGB) at 320x320
	VisualFrames []float32 `protobuf:"fixed32,1,rep,packed,name=visual_frames,json=visualFrames,proto3" json:"visual_frames,omitempty"`
	// Audio features: single window [32 * 16 * 16]
	// One audio window covers ~16 visual frames
	AudioFeatures []float32 `protobuf:"fixed32,2,rep,packed,name=audio_features,json=audioFeatures,proto3" json:"audio_features,omitempty"`
	// Number of frames in this batch (1-25)
	BatchSize int32 `protobuf:"varint,3,opt,name=batch_size,json=batchSize,proto3" json:"batch_size,omitempty"`
	// Starting frame index for crop rectangle lookup (optional)
	StartFrameIdx int32 `protobuf:"varint,4,opt,name=start_frame_idx,json=startFrameIdx,proto3" json:"start_frame_idx,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchRequest) Reset() {
	*x = BatchRequest{}
	mi := &file_proto_lipsync_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchRequest) ProtoMessage() {}

func (x *BatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_lipsync_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchRequest.ProtoReflect.Descriptor instead.
func (*BatchRequest) Descriptor() ([]byte, []int) {
	return file_proto_lipsync_proto_rawDescGZIP(), []int{0}
}

func (x *BatchRequest) GetVisualFrames() []float32 {
	if x != nil {
		return x.VisualFrames
	}
	return nil
}

func (x *BatchRequest) GetAudioFeatures() []float32 {
	if x != nil {
		return x.AudioFeatures
	}
	return nil
}

func (x *BatchRequest) GetBatchSize() int32 {
	if x != nil {
		return x.BatchSize
	}
	return 0
}

func (x *BatchRequest) GetStartFrameIdx() int32 {
	if x != nil {
		return x.StartFrameIdx
	}
	return 0
}

type BatchResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Output frames: flattened array [batch_size * 3 * 320 * 320]
	// Each frame is 3 channels (RGB) at 320x320
	OutputFrames []float32 `protobuf:"fixed32,1,rep,packed,name=output_frames,json=outputFrames,proto3" json:"output_frames,omitempty"`
	// Inference time in milliseconds
	InferenceTimeMs float64 `protobuf:"fixed64,2,opt,name=inference_time_ms,json=inferenceTimeMs,proto3" json:"inference_time_ms,omitempty"`
	// Success flag
	Success bool `protobuf:"varint,3,opt,name=success,proto3" json:"success,omitempty"`
	// Error message if failed
	Error         string `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchResponse) Reset() {
	*x = BatchResponse{}
	mi := &file_proto_lipsync_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchResponse) ProtoMessage() {}

func (x *BatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_lipsync_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchResponse.ProtoReflect.Descriptor instead.
func (*BatchResponse) Descriptor() ([]byte, []int) {
	return file_proto_lipsync_proto_rawDescGZIP(), []int{1}
}

func (x *BatchResponse) GetOutputFrames() []float32 {
	if x != nil {
		return x.OutputFrames
	}
	return nil
}

func (x *BatchResponse) GetInferenceTimeMs() float64 {
	if x != nil {
		return x.InferenceTimeMs
	}
	return 0
}

func (x *BatchResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *BatchResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type HealthRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HealthRequest) Reset() {
	*x = HealthRequest{}
	mi := &file_proto_lipsync_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HealthRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthRequest) ProtoMessage() {}

func (x *HealthRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_lipsync_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthRequest.ProtoReflect.Descriptor instead.
func (*HealthRequest) Descriptor() ([]byte, []int) {
	return file_proto_lipsync_proto_rawDescGZIP(), []int{2}
}

type HealthResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Healthy       bool                   `protobuf:"varint,1,opt,name=healthy,proto3" json:"healthy,omitempty"`
	ModelPath     string                 `protobuf:"bytes,2,opt,name=model_path,json=modelPath,proto3" json:"model_path,omitempty"`
	CudaAvailable bool                   `protobuf:"varint,3,opt,name=cuda_available,json=cudaAvailable,proto3" json:"cuda_available,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HealthResponse) Reset() {
	*x = HealthResponse{}
	mi := &file_proto_lipsync_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HealthResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthResponse) ProtoMessage() {}

func (x *HealthResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_lipsync_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthResponse.ProtoReflect.Descriptor instead.
func (*HealthResponse) Descriptor() ([]byte, []int) {
	return file_proto_lipsync_proto_rawDescGZIP(), []int{3}
}

func (x *HealthResponse) GetHealthy() bool {
	if x != nil {
		return x.Healthy
	}
	return false
}

func (x *HealthResponse) GetModelPath() string {
	if x != nil {
		return x.ModelPath
	}
	return ""
}

func (x *HealthResponse) GetCudaAvailable() bool {
	if x != nil {
		return x.CudaAvailable
	}
	return false
}

var File_proto_lipsync_proto protoreflect.FileDescriptor

const file_proto_lipsync_proto_rawDesc = "" +
	"\n" +
	"\x13proto/lipsync.proto\x12\alipsync\"\xa1\x01\n" +
	"\fBatchRequest\x12#\n" +
	"\rvisual_frames\x18\x01 \x03(\x02R\fvisualFrames\x12%\n" +
	"\x0eaudio_features\x18\x02 \x03(\x02R\raudioFeatures\x12\x1d\n" +
	"\n" +
	"batch_size\x18\x03 \x01(\x05R\tbatchSize\x12&\n" +
	"\x0fstart_frame_idx\x18\x04 \x01(\x05R\rstartFrameIdx\"\x90\x01\n" +
	"\rBatchResponse\x12#\n" +
	"\routput_frames\x18\x01 \x03(\x02R\foutputFrames\x12*\n" +
	"\x11inference_time_ms\x18\x02 \x01(\x01R\x0finferenceTimeMs\x12\x18\n" +
	"\asuccess\x18\x03 \x01(\bR\asuccess\x12\x14\n" +
	"\x05error\x18\x04 \x01(\tR\x05error\"\x0f\n" +
	"\rHealthRequest\"p\n" +
	"\x0eHealthResponse\x12\x18\n" +
	"\ahealthy\x18\x01 \x01(\bR\ahealthy\x12\x1d\n" +
	"\n" +
	"model_path\x18\x02 \x01(\tR\tmodelPath\x12%\n" +
	"\x0ecuda_available\x18\x03 \x01(\bR\rcudaAvailable2\x81\x01\n" +
	"\aLipSync\x12;\n" +
	"\n" +
	"InferBatch\x12\x15.lipsync.BatchRequest\x1a\x16.lipsync.BatchResponse\x129\n" +
	"\x06Health\x12\x16.lipsync.HealthRequest\x1a\x17.lipsync.HealthResponseB!Z\x1fgo-onnx-inference/proto/lipsyncb\x06proto3"

var (
	file_proto_lipsync_proto_rawDescOnce sync.Once
	file_proto_lipsync_proto_rawDescData []byte
)

func file_proto_lipsync_proto_rawDescGZIP() []byte {
	file_proto_lipsync_proto_rawDescOnce.Do(func() {
		file_proto_lipsync_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_lipsync_proto_rawDesc), len(file_proto_lipsync_proto_rawDesc)))
	})
	return file_proto_lipsync_proto_rawDescData
}

var file_proto_lipsync_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_proto_lipsync_proto_goTypes = []any{
	(*BatchRequest)(nil),   // 0: lipsync.BatchRequest
	(*BatchResponse)(nil),  // 1: lipsync.BatchResponse
	(*HealthRequest)(nil),  // 2: lipsync.HealthRequest
	(*HealthResponse)(nil), // 3: lipsync.HealthResponse
}
var file_proto_lipsync_proto_depIdxs = []int32{
	0, // 0: lipsync.LipSync.InferBatch:input_type -> lipsync.BatchRequest
	2, // 1: lipsync.LipSync.Health:input_type -> lipsync.HealthRequest
	1, // 2: lipsync.LipSync.InferBatch:output_type -> lipsync.BatchResponse
	3, // 3: lipsync.LipSync.Health:output_type -> lipsync.HealthResponse
	2, // [2:4] is the sub-list for method output_type
	0, // [0:2] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_proto_lipsync_proto_init() }
func file_proto_lipsync_proto_init() {
	if File_proto_lipsync_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_lipsync_proto_rawDesc), len(file_proto_lipsync_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_lipsync_proto_goTypes,
		DependencyIndexes: file_proto_lipsync_proto_depIdxs,
		MessageInfos:      file_proto_lipsync_proto_msgTypes,
	}.Build()
	File_proto_lipsync_proto = out.File
	file_proto_lipsync_proto_goTypes = nil
	file_proto_lipsync_proto_depIdxs = nil
}
